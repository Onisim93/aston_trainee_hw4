services:

  postgres1:
    image: 'postgres:latest'
    container_name: "postgres1"
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5432:5432'

  postgres2:
    image: 'postgres:latest'
    container_name: "postgres2"
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5433:5432'

  postgres3:
    image: 'postgres:latest'
    container_name: "postgres3"
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5434:5432'

  postgres4:
    image: 'postgres:latest'
    container_name: "postgres4"
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5435:5432'

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
  kafka:
      image: wurstmeister/kafka:2.13-2.7.0
      ports:
        - "9092:9092"
        - "29092:29092"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"  # Отключение автоматического создания топиков
        KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092
        KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      healthcheck:
        test: [ "CMD", "nc", "-z", "localhost", "9092" ]
        interval: 30s
        retries: 5

      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      depends_on:
          zookeeper:
            condition: service_started
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    ports:
      - "8085:8085"
    depends_on:
        kafka:
          condition: service_healthy
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
        kafka:
          condition: service_healthy
  eureka-server:
    build:
      context: ./service_registry
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
  order-service:
    build:
      context: ./order_service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres1:
        condition: service_started
      eureka-server:
        condition: service_started
      schema-registry:
        condition: service_started
  payment-service:
    build:
      context: ./payment_service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres3:
        condition: service_started
      eureka-server:
        condition: service_started
      schema-registry:
        condition: service_started
  restaurant-service:
    build:
      context: ./restaurant_service
      dockerfile: Dockerfile
    depends_on:
        kafka:
          condition: service_healthy
        postgres2:
          condition: service_started
        eureka-server:
          condition: service_started
        schema-registry:
          condition: service_started
  notification-service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    ports:
      - '6565:6565'
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    ports:
        - "8082:8082"
    depends_on:
      - eureka-server
